# Direct CMake to use icpx rather than the default C++ compiler/linker on Linux
# and icx-cl on Windows
if(UNIX)
    set(CMAKE_CXX_COMPILER icpx)
else() # Windows
    include (CMakeForceCompiler)
    CMAKE_FORCE_CXX_COMPILER (icx-cl IntelDPCPP)
    include (Platform/Windows-Clang)
endif()

enable_testing()
add_executable(cg_test cg_test.cpp)
target_include_directories(cg_test PRIVATE ${CMAKE_SOURCE_DIR}/challenge/include/cg) 

set(TARGET_NAME CG_CORE)

set(FPGA_DEVICE "p520_hpc_m210h_g3x16")


# Set the names of the makefile targets to be generated by cmake
set(EMULATOR_TARGET fpga_emu)
set(SIMULATOR_TARGET fpga_sim)
set(REPORT_TARGET report)
set(FPGA_TARGET fpga)

# Set the names of the generated files per makefile target
set(EMULATOR_OUTPUT_NAME ${TARGET_NAME}.${EMULATOR_TARGET})
set(SIMULATOR_OUTPUT_NAME ${TARGET_NAME}.${SIMULATOR_TARGET})
set(REPORT_OUTPUT_NAME ${TARGET_NAME}.${REPORT_TARGET})
set(FPGA_OUTPUT_NAME ${TARGET_NAME}.${FPGA_TARGET})


set(QACTYPES "-qactypes")
set(COMMON_COMPILE_FLAGS -fsycl -fintelfpga -Wall ${WIN_FLAG} ${DEBUG_FLAGS} ${QACTYPES} ${USER_FLAGS})
set(COMMON_LINK_FLAGS -fsycl -fintelfpga ${QACTYPES} ${USER_FLAGS})
set(EMULATOR_COMPILE_FLAGS -DFPGA_EMULATOR)
set(EMULATOR_LINK_FLAGS )
set(REPORT_COMPILE_FLAGS -DFPGA_HARDWARE)
set(REPORT_LINK_FLAGS -Xshardware -Xstarget=${FPGA_DEVICE} ${USER_FPGA_FLAGS} -fsycl-link=early)
set(SIMULATOR_COMPILE_FLAGS -Xssimulation -DFPGA_SIMULATOR)
set(SIMULATOR_LINK_FLAGS -Xssimulation -Xsghdl -Xstarget=${FPGA_DEVICE} ${USER_FPGA_FLAGS} -reuse-exe=${CMAKE_BINARY_DIR}/${SIMULATOR_OUTPUT_NAME})
set(FPGA_COMPILE_FLAGS -DFPGA_HARDWARE)
set(FPGA_LINK_FLAGS -Xshardware -Xstarget=${FPGA_DEVICE} ${USER_FPGA_FLAGS} -reuse-exe=${CMAKE_BINARY_DIR}/${FPGA_OUTPUT_NAME})

#

target_compile_options(cg_test PRIVATE ${COMMON_COMPILE_FLAGS})
target_link_libraries(cg_test ${COMMON_LINK_FLAGS})

###############################################################################
### Options to enable/disable specific targets
###############################################################################
option(BUILD_EMULATOR "Build the FPGA emulator target" OFF)
option(BUILD_SIMULATOR "Build the FPGA simulator target" OFF)
option(BUILD_REPORT "Build the FPGA report target" OFF)
option(BUILD_FPGA "Build the FPGA hardware target" OFF)


if(BUILD_EMULATOR)
  target_link_libraries(cg_test ${EMULATOR_TARGET} )
  target_compile_options(cg_test PRIVATE ${EMULATOR_COMPILE_FLAGS})
  target_link_libraries(cg_test ${EMULATOR_LINK_FLAGS})
endif()
if(BUILD_FPGA)
  target_link_libraries(cg_test ${FPGA_TARGET} )
  target_compile_options(cg_test PRIVATE ${FPGA_COMPILE_FLAGS})
  target_link_libraries(cg_test ${FPGA_COMPILE_FLAGS})
endif()
if(BUILD_REPORT)
  target_link_libraries(cg_test ${REPORT_TARGET} )
  target_compile_options(cg_test PRIVATE ${REPORT_COMPILE_FLAGS})
  target_link_libraries(cg_test ${REPORT_LINK_FLAGS})
endif()
if(BUILD_SIMULATOR)
  target_link_libraries(cg_test ${SIMULATOR_TARGET} )
  target_compile_options(cg_test PRIVATE ${SIMULATOR_COMPILE_FLAGS})
  target_link_libraries(cg_test ${SIMULATOR_LINK_FLAGS})
endif()




target_link_libraries(cg_test gtest gtest_main)

#
include_directories(${CMAKE_SOURCE_DIR}/challenge/include/cg)

include_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR}) 
include(GoogleTest)


gtest_discover_tests(cg_test
DISCOVERY_TIMEOUT 120)
